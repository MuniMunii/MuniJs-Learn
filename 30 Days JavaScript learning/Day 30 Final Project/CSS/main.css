*{
    font-family: 'Roboto', sans-serif;
    box-sizing: border-box;
}
body{
    box-sizing: border-box;
    margin: 0;
    background-color: #F8F4F9;
}
.wrapper{
    margin: 0 auto;
    width: 90%;
}
.title{
    text-align: center;
    font-family: 'Roboto', sans-serif;
    font-weight: 300;
}
.title h1{
    font-weight: 400;
    color: #F3D34A;
    letter-spacing: 2px;
}
.input-setting{
    margin: 0 auto;
    padding-top: 1em;
    padding-bottom: 2em;
    text-align: center;
    background-color: white;
}
.input-class{
    color: #F3D34A;
    margin-bottom: 1em;
    padding-left: 8px;
    width: 50%;
    height: 30px;
    border-radius: 25px;
    outline: none;
    border: solid 1px grey;
}
.button-class{
    padding: 0.5em 3em;
    margin: 0 10px;
    border-radius: 25px;
    width: 150px;
    border: none;
    background-color: #F3D34A;
    display: flex;
    justify-content: center;
    align-items: center;
}
#container{
    justify-content: space-between;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    margin-top: 15px;
}
.country-card{
    position: relative;
    display: flex;
    flex-direction: column;
    font-family: 'Roboto', sans-serif ;
    padding: 1em;
    width: 170px;
    height: 250px;
    margin: 10px;
    justify-content: space-between;
    background-color: white;
    overflow: hidden;
}
.text-content{
    justify-self: center;
    font-size: 0.7rem;
    margin: 6px 0;
}
.title-card{
    color: #F3D34A;
    text-align: center;
    font-size: 1rem;
}
.img-card{
    width: 130px;
    height: 100px;
    margin: 0 auto;
}

.img-card .text-content{
    overflow-wrap:break-word ;
}
.statistic-button-list{
    display: flex;
    justify-content: center;
}
.statistic-button{
    margin: 0 8px;
    border: none;
    padding: 0.5em 3em;
    background-color: #F3D34A;
}
.statistic-display{
    max-width: 1000px;
    margin: 0 auto;
}
.statistic-bar{
    display: flex;
    flex-direction: column;
    margin: 10px 0;
}
.Bar{
    height: 32px;
    margin: 0 15px;
    max-width: 90%;
    background-color: #F3D34A;
}
.Bar:first-child {
    width: 90%;
}
.label-bar{
    width: 10em;
}
.percentage{
    display: flex;
    justify-content: flex-start;
    align-items: center;
}
/* CreateDisplayStatistic(getCountries) */
/* function CreateDisplayStatistic(Data){
    let languagesCount=Data
    .filter(country=>country.languages)
    .map(country=>country.languages)
    .reduce((acc,lang)=>acc.concat(lang),[])
    .reduce((languages,count)=>{
        languages[count]=(languages[count]||0)+1
        return languages
    },{});
    const LanguagesObject=Object.keys(languagesCount).map(languages=>({
        languages,
        LanguagesCount:languagesCount[languages]
    }))
    let sortLanguages=LanguagesObject.sort((a,b)=>b.LanguagesCount-a.LanguagesCount).slice(0,9)
    const allLanguagesIncrement=LanguagesObject.map(country=>country.LanguagesCount).reduce((a,b)=>a+b,0)
    console.log(sortLanguages);
    console.log(allLanguagesIncrement);

    sortLanguages.forEach((Data)=>{
    const getStatisticBar=document.getElementById('statistic-bar')
    const createLabel=document.createElement('p')
    createLabel.setAttribute('class','label-bar')
    createLabel.innerHTML=Data.languages

    const createBar=document.createElement('div')
    createBar.setAttribute('class','Bar')
    createBar.style.width=Data.LanguagesCount/allLanguagesIncrement*100
    
    const createCount=document.createElement('p')
    createCount.innerHTML=Data.LanguagesCount
    getStatisticBar.appendChild(createLabel)
    getStatisticBar.appendChild(createBar)
    getStatisticBar.appendChild(createCount)
})
let filteringPopulation=Data.filter(country=>country.population)
        let incrementOfAllCountry=filteringPopulation.reduce((a,b)=>a-b,0);
        let createObjectPopulation=filteringPopulation.map(country=>({
            country:country.name,
            population:country.population
        }),{})
        .sort((a,b)=>a.population-b.population)
        .slice(0,9);
        createObjectPopulation.unshift({
        country:'World',
        population:incrementOfAllCountry
        }); */